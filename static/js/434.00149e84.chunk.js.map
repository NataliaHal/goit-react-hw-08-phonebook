{"version":3,"file":"static/js/434.00149e84.chunk.js","mappings":"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","sources":["redux/phonebook/selector.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectPhones = state => state.phones.items;\n\nexport const selectFilter = state => state.filter.value;\n\nexport const getIsLoading = state => state.phones.isLoading;\n\nexport const getError = state => state.phones.error;","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  max-width: 350px;\n  border-radius: 5px;\n  padding: 10px;\n  background-color: #18829e;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 25px;\n  font-size: 24px;\n`;\n\nexport const Input = styled.input`\n  width: 250px;\n  height: 20px;\n  margin-top: 2px;\n  border: none;\n  border-radius: 10px;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  padding: 3px 5px;\n  width: 120px;\n  border: none;\n  font-weight: 500;\n  border-radius: 10px;\n\n  :hover {\n    color: blue;\n    scale: 1.05;\n    cursor: pointer;\n    background-color: #234a5c;\n    transition: background-color 200ms linear;\n    transition: scale 200ms linear;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { selectPhones } from 'redux/phonebook/selector';\nimport { addContact } from 'redux/phonebook/operations';\nimport * as S from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const phones = useSelector(selectPhones);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const existingName = phones.some(\n      item => item.name.toLowerCase() === name.toLowerCase()\n    );\n    const existingNumber = phones.find(item => item.number === number);\n\n    if (existingName) {\n      return alert(`Contact \"${name}\" is already in contacts list`);\n    } else if (existingNumber) {\n      return alert(`Number \"${number}\" is already in contacts list`);\n    }\n\n    const newContact = {\n      name,\n      number,\n    };\n\n    dispatch(addContact(newContact));\n\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <S.Form autoComplete=\"off\" onSubmit={handleSubmit}>\n      <S.Label>\n        Name\n        <S.Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\"Enter name\"\n          required\n          onChange={handleChange}\n        />\n      </S.Label>\n      <S.Label>\n        Number\n        <S.Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder=\"Enter number\"\n          required\n          onChange={handleChange}\n        />\n      </S.Label>\n      <S.Button type=\"submit\" disabled={!name || !number}>\n        Add Contact\n      </S.Button>\n    </S.Form>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  font-size: 16px;\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n  font-size: 16px;\n`;\n\nexport const Button = styled.button`\n  margin-left: 20px;\n  width: 60px;\n  padding: 3px 5px;\n  border: none;\n  font-weight: 500;\n  border-radius: 10px;\n\n  &:hover {\n    color: white;\n    scale: 1.1;\n    cursor: pointer;\n    background-color: #234a5c;\n    transition: background-color 200ms linear;\n    transition: scale 200ms linear;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport * as S from './ContactListItem.styled';\n\nconst ContactListItem = ({ contactName, contactNumber, onClick }) => {\n  return (\n    <S.Item>\n      <p>\n        {contactName}: {contactNumber}\n      </p>\n      <S.Button type=\"button\" onClick={onClick}>\n        Delete\n      </S.Button>\n    </S.Item>\n  );\n};\n\nContactListItem.propTypes = {\n  contactName: PropTypes.string.isRequired,\n  contactNumber: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import styled from '@emotion/styled';\n\nexport const ContactListStyle = styled.ul`\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter, selectPhones } from 'redux/phonebook/selector';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { ContactListStyle } from './ContactList.styled';\nimport { deleteContact } from 'redux/phonebook/operations';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const phones = useSelector(selectPhones);\n  const filter = useSelector(selectFilter);\n  const filteredPhones = phones.filter(phone =>\n    phone.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <ContactListStyle>\n      {filteredPhones.map(({ id, name, number }) => {\n        return (\n          <ContactListItem\n            key={id}\n            id={id}\n            contactName={name}\n            contactNumber={number}\n            onClick={() => dispatch(deleteContact(id))}\n          />\n        );\n      })}\n    </ContactListStyle>\n  );\n};\n\nexport default ContactList;\n","import { Label, Input } from 'components/ContactForm/ContactForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { setFiler } from 'redux/phonebook/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Label>\n      <h3>Find contacts name</h3>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        onChange={e => dispatch(setFiler(e.target.value))}\n      />\n    </Label>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  max-width: 500px;\n  padding: 40px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  background-color: #607d8bc4;\n  margin: auto;\n  margin-top: 100px;\n  border-radius: 20px;\n`;\n\nexport const SectionTitle = styled.h1`\n  margin-bottom: 15px;\n  text-transform: uppercase;\n  font-size: 24px;\n  color: hsl(200deg 48% 86%);\n  text-shadow: 2px 2px 5px black;\n`;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/phonebook/operations';\nimport { getError, getIsLoading, selectPhones } from 'redux/phonebook/selector';\nimport * as S from './Contacts.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const phones = useSelector(selectPhones);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <S.Container>\n      <S.SectionTitle>Phonebook</S.SectionTitle>\n      <ContactForm />\n      <S.SectionTitle>Contacts</S.SectionTitle>\n      <Filter />\n      {isLoading && (\n        <>\n          <h1>Loading...</h1>\n        </>\n      )}\n      {error && <p>Sorry. {error}</p>}\n      {!isLoading && !error && phones.length < 1 && (\n        <p>Sorry, there is no contacts yet</p>\n      )}\n      <ContactList />\n    </S.Container>\n  );\n}\n"],"names":["selectPhones","state","phones","items","selectFilter","filter","value","getIsLoading","isLoading","getError","error","Form","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Input","_templateObject3","Button","_templateObject4","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","useSelector","handleChange","event","_event$target","target","_jsxs","S","autoComplete","onSubmit","preventDefault","existingName","some","item","toLowerCase","existingNumber","find","alert","concat","newContact","addContact","children","_jsx","type","pattern","title","placeholder","required","onChange","disabled","Item","_ref","contactName","contactNumber","onClick","ContactListStyle","filteredPhones","phone","includes","map","id","ContactListItem","deleteContact","e","setFiler","Container","SectionTitle","Contacts","useEffect","fetchContacts","ContactForm","Filter","_Fragment","length","ContactList"],"sourceRoot":""}